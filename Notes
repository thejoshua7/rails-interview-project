# --------------------------------------------------------------------------------------------
#                                            Notes
# --------------------------------------------------------------------------------------------

#http://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html#upgrading-from-rails-4-2-to-rails-5-0

# Upgrades are a pain...

# rest api
# https://www.youtube.com/watch?v=QojnRc7SS9o

# RailsCast 352
# token auth
# https://www.youtube.com/watch?v=AiVj2xyTBcw


http://localhost:3000/api/v1/questions
http://localhost:3000/api/v1/questions/1

# RailsCast 350

# good request
curl 'http://localhost:3000/api/v1/questions?api_key=5670cc310a4538a7d486442d7cb8baab' -I

#bad request
curl 'http://localhost:3000/api/v1/questions?api_key=badbadbadbadbadbadbadbadbadbaddd' -I

#private request
http://localhost:3000/api/v1/questions/19.json?api_key=5670cc310a4538a7d486442d7cb8baab

#All
http://localhost:3000/api/v1/questions?api_key=5670cc310a4538a7d486442d7cb8baab
#Specific
http://localhost:3000/api/v1/questions/1?api_key=5670cc310a4538a7d486442d7cb8baab

#http://guides.rubyonrails.org/v3.2.8/active_record_querying.html

$ rails g migration AddRequestCountToTenant request_count:integer
      invoke  active_record
      create    db/migrate/20171125174828_add_request_count_to_tenant.rb
$ rake db:migrate



--------------------------
#       Postgresql
--------------------------
https://www.devbridge.com/articles/migrating-from-mssql-to-postgresql/#

#commands cheat sheet
https://gist.github.com/Kartones/dd3ff5ec5ea238d4c546

#list databases
psql -l 
psql -d ria_development


# reset the test database
rails db:environment:set RAILS_ENV=test
bundle exec rake db:drop RAILS_ENV=test
bundle exec rake db:create RAILS_ENV=test
bundle exec rake db:schema:load RAILS_ENV=test

http://matthewlehner.net/rails-api-testing-guidelines/

https://www.airpair.com/ruby-on-rails/posts/building-a-restful-api-in-a-rails-application




$ rails generate rspec:install

#run tests
$ bundle exec rspec


#stop rails server and pgamin
postgres=# drop database ria_test;
postgres=# create database ria_test with template ria_development;


#rails console
rails c

Tenant.find_by_api_key('5670cc310a4538a7d486442d7cb8baab')
Tenant.find_by_name('Mertz Inc')

Tenant.where(request_count: 0..9999)
Tenant.where("request_count > 0")
Tenant.where("request_count IS NULL")
Tenant.where("request_count IS NULL").limit(3)

# load last question and then load user
q = Question.last
User.find_by_id(q.user_id)


#wraps db changes in a transaction and rolls back
rails c --sandbox

app.dashboard_path
app.get _
app.class
app.cookies
app.response.headers
pp _; nil
puts app.response.body
reload!

# disable sql output in rails server
ActiveRecord::Base.logger.level = 1

# add settings to ~/.irbrc
ActiveRecord::Base.logger.level = 1 if defined? ActiveRecord::Base
# you can even code user specific functions or helper functions
def y(obj)
  puts obj.to_yaml
end


t = Tenant.first
puts t.to_yaml


# -----------------------------------------------------------------
#                            Nice Gems
# -----------------------------------------------------------------
#Awesome Print
require 'awesome_print'
ap Tenant.first.attributes

#clipboard
require 'clipboard'
Clipboard.copy 'foobar'
Clipboard.paste


# -----------------------------------------------------------------

#update existing rows in db migrate
#Tenant.update_all(request_count: 0)

t = Tenant.last
t.update(name: "Balisteri and Sons")

q = Question.find([1, 3, 4])
irb(main):025:0> q.each do |x|
irb(main):026:1* puts x.title
irb(main):027:1> end

Question.where.not(private: true).limit(20)



# -----------------------------------------------------------------
# gem 'awesome_rails_console' <- check this out. Looks promising.
# bundle install
# rails generate awesome_rails_console:install
# -----------------------------------------------------------------

#Memoization
class FooController < ApplicationController
  before_filter :set_user
  private
  def set_user
    @current_user ||= User.find(session[:user_id])
  end
end

# map applies method to all elements in collection
t = Tenant.all
t.map {|t| t.id }





